name: Build Multi-Platform Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup FVM
      uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config.outputs.FLUTTER_CHANNEL }}
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: rust
    
    - name: Install Flutter dependencies
      run: flutter pub get
    
    - name: Build Windows application
      run: flutter build windows --release
    
    - name: Create Windows installer
      run: |
        # 创建Inno Setup安装脚本
        @'
        [Setup]
        AppName=FRB Demo
        AppVersion=1.0.0
        DefaultDirName={autopf}\FRB Demo
        DefaultGroupName=FRB Demo
        OutputBaseFilename=frb-demo-windows-x64-setup
        Compression=lzma2
        SolidCompression=yes
        
        [Files]
        Source: "build\windows\x64\runner\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
        
        [Icons]
        Name: "{group}\FRB Demo"; Filename: "{app}\frb_demo.exe"
        Name: "{commondesktop}\FRB Demo"; Filename: "{app}\frb_demo.exe"
        '@ > setup.iss
        
        # 安装Inno Setup
        choco install innosetup -y
        
        # 构建安装程序
        "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" setup.iss
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: frb-demo-windows-x64-setup.exe

  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup FVM
      uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config.outputs.FLUTTER_CHANNEL }}
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: rust
    
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev rpm
    
    - name: Install Flutter dependencies
      run: flutter pub get
    
    - name: Build Linux application
      run: flutter build linux --release
    
    - name: Create AppImage
      run: |
        # 下载appimagetool
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        
        # 创建AppImage
        mkdir -p AppDir/usr/bin
        cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
        
        # 创建desktop文件
        cat > AppDir/frb-demo.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=FRB Demo
        Exec=frb_demo
        Icon=frb_demo
        Categories=Utility;
        EOF
        
        # 创建AppImage
        ./appimagetool-x86_64.AppImage AppDir frb-demo-linux-x86_64.AppImage
    
    - name: Create DEB package
      run: |
        mkdir -p debian/DEBIAN
        mkdir -p debian/usr/bin
        mkdir -p debian/usr/share/applications
        
        # 复制应用文件
        cp -r build/linux/x64/release/bundle/* debian/usr/bin/
        
        # 创建control文件
        cat > debian/DEBIAN/control << EOF
        Package: frb-demo
        Version: 1.0.0
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: Your Name <your.email@example.com>
        Description: A Flutter Rust Bridge demo application
        EOF
        
        # 创建desktop文件
        cat > debian/usr/share/applications/frb-demo.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=FRB Demo
        Exec=/usr/bin/frb_demo
        Icon=/usr/bin/data/flutter_assets/assets/icon.png
        Categories=Utility;
        EOF
        
        # 构建DEB包
        dpkg-deb --build debian frb-demo-linux-amd64.deb
    
    - name: Upload Linux packages
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          frb-demo-linux-x86_64.AppImage
          frb-demo-linux-amd64.deb

  build-macos:
    name: Build macOS DMG
    runs-on: macos-latest
    
    strategy:
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            target: x86_64-apple-darwin
            suffix: x64
          - arch: arm64
            target: aarch64-apple-darwin
            suffix: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup FVM
      uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config.outputs.FLUTTER_CHANNEL }}
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: rust
    
    - name: Install Flutter dependencies
      run: flutter pub get
    
    - name: Build macOS application
      run: flutter build macos --release
    
    - name: Create macOS DMG
      run: |
        # 安装create-dmg
        brew install create-dmg
        
        # 创建DMG
        create-dmg \
          --volname "FRB Demo" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "FRB Demo.app" 200 190 \
          --hide-extension "FRB Demo.app" \
          --app-drop-link 600 185 \
          "frb-demo-macos-${{ matrix.suffix }}.dmg" \
          "build/macos/Build/Products/Release/"
    
    - name: Upload macOS DMG
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.suffix }}-dmg
        path: frb-demo-macos-${{ matrix.suffix }}.dmg

  create-release:
    name: Create Release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-release
        path: ./releases
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-release
        path: ./releases
    
    - name: Download macOS x64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-x64-release
        path: ./releases
    
    - name: Download macOS arm64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-arm64-release
        path: ./releases
    
    - name: Download Windows installer
      uses: actions/download-artifact@v4
      with:
        name: windows-installer
        path: ./releases
    
    - name: Download Linux packages
      uses: actions/download-artifact@v4
      with:
        name: linux-packages
        path: ./releases
    
    - name: Download macOS packages
      uses: actions/download-artifact@v4
      with:
        name: macos-x64-release
        path: ./releases
    
    - name: Download macOS ARM64 packages
      uses: actions/download-artifact@v4
      with:
        name: macos-arm64-release
        path: ./releases
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          releases/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
