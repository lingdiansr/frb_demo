name: FastForge Multi-Platform Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-all:
    name: Build All Platforms with FastForge
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            targets: "deb,appimage"
          - os: windows-latest
            platform: windows
            targets: "exe"
          - os: macos-latest
            platform: macos
            targets: "dmg"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup FVM
      uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config.outputs.FLUTTER_CHANNEL }}
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: rust
    
    - name: Install platform dependencies
      run: |
        if [ "${{ matrix.platform }}" == "linux" ]; then
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
        elif [ "${{ matrix.platform }}" == "windows" ]; then
          choco install innosetup -y
        elif [ "${{ matrix.platform }}" == "macos" ]; then
          brew install create-dmg
        fi
      shell: bash
    
    - name: Install Flutter dependencies
      run: flutter pub get
    
    - name: Install FastForge
      run: dart pub global activate flutter_distributor
    
    - name: Build with FastForge
      run: |
        flutter_distributor package \
          --platform ${{ matrix.platform }} \
          --targets ${{ matrix.targets }} \
          --skip-clean
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-packages
        path: dist/**/*

  create-release:
    name: Create Release
    needs: build-all
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: releases
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          releases/**/*/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
