name: Simple Multi-Platform Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup FVM
      uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config.outputs.FLUTTER_CHANNEL }}
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: rust
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
    
    - name: Install Flutter dependencies
      run: flutter pub get
    
    - name: Build Linux application
      run: flutter build linux --release
    
    - name: Create Linux package
      run: |
        cd build/linux/x64/release/bundle
        tar -czf ../../../../frb-demo-linux-x64.tar.gz *
    
    - name: Upload Linux package
      uses: actions/upload-artifact@v4
      with:
        name: linux-package
        path: build/frb-demo-linux-x64.tar.gz

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup FVM
      uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config.outputs.FLUTTER_CHANNEL }}
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: rust
    
    - name: Install Flutter dependencies
      run: flutter pub get
    
    - name: Build Windows application
      run: flutter build windows --release
    
    - name: Create Windows package
      run: |
        cd build/windows/x64/runner/Release
        7z a ../../../../frb-demo-windows-x64.zip *
    
    - name: Upload Windows package
      uses: actions/upload-artifact@v4
      with:
        name: windows-package
        path: build/frb-demo-windows-x64.zip

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    
    strategy:
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            target: x86_64-apple-darwin
            suffix: x64
          - arch: arm64
            target: aarch64-apple-darwin
            suffix: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup FVM
      uses: kuhnroyal/flutter-fvm-config-action@v2
      id: fvm-config
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ steps.fvm-config.outputs.FLUTTER_VERSION }}
        channel: ${{ steps.fvm-config.outputs.FLUTTER_CHANNEL }}
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: rust
    
    - name: Install Flutter dependencies
      run: flutter pub get
    
    - name: Build macOS application
      run: flutter build macos --release
    
    - name: Create macOS package
      run: |
        cd build/macos/Build/Products/Release
        tar -czf ../../../../frb-demo-macos-${{ matrix.suffix }}.tar.gz *.app
    
    - name: Upload macOS package
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.suffix }}-package
        path: build/frb-demo-macos-${{ matrix.suffix }}.tar.gz

  create-release:
    name: Create Release
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Linux package
      uses: actions/download-artifact@v4
      with:
        name: linux-package
        path: ./releases
    
    - name: Download Windows package
      uses: actions/download-artifact@v4
      with:
        name: windows-package
        path: ./releases
    
    - name: Download macOS x64 package
      uses: actions/download-artifact@v4
      with:
        name: macos-x64-package
        path: ./releases
    
    - name: Download macOS arm64 package
      uses: actions/download-artifact@v4
      with:
        name: macos-arm64-package
        path: ./releases
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          releases/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
